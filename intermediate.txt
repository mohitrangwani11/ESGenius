import streamlit as st
import os
from dotenv import load_dotenv
from PyPDF2 import PdfReader
from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings import OpenAIEmbeddings, HuggingFaceEmbeddings
from langchain.vectorstores import FAISS
#from langchain.llms import OpenAI
from langchain.chat_models import ChatOpenAI
from langchain.memory import ConversationBufferMemory
from langchain.chains import ConversationalRetrievalChain
from htmlTemplates import css,bot_template,user_template


def get_pdf_text(pdf_docs):
    text = ""
    for doc in pdf_docs:
        pdf_reader = PdfReader(doc)
        for page in pdf_reader.pages:
            text+= page.extract_text()
    return text

def get_text_chunks(text):
    text_splitter = CharacterTextSplitter(
        separator="\n",
        chunk_size=1000,
        chunk_overlap=200,
        length_function=len
    )
    chunks = text_splitter.split_text(text)
    return chunks

def get_vectorstore(text_chunks):
    embeddings = OpenAIEmbeddings()
    # embeddings = HuggingFaceInstructEmbeddings(model_name="hkunlp/instructor-xl")
    vectorstore = FAISS.from_texts(texts=text_chunks, embedding=embeddings)
    return vectorstore

def get_vectorstore_open_source(text_chunks):
    #embeddings = OpenAIEmbeddings() https://huggingface.co/hkunlp/instructor-xl
    embeddings = HuggingFaceEmbeddings(model_name="hkunlp/instructor-xl")
    return text_chunks

def get_conversation_chain(vectorstore):
    llm = ChatOpenAI()
    memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
    conversation_chain = ConversationalRetrievalChain.from_llm(
        llm = llm,
        retriever= vectorstore.as_retriever(),
        memory = memory
    )

def handle_user_input(user_question):
    response = st.session_state.conversation({'question': user_question})
    st.write(response)



def main():
    load_dotenv()
    #st.set_page_config(page_title=None, page_icon=None, layout="centered", initial_sidebar_state="auto", menu_items=None
    st.set_page_config(
        page_title= "ESGenius",
        page_icon=":books:",
        #layout = "wide",
        #initial_sidebar_state="expanded"
        )
    st.write(css, unsafe_allow_html=True)
    
    if "conversation" not in st.session_state:
        st.session_state.conversation = None

    st.header("ESGenius: Your Intelligent ESG Guide")
    user_question = st.text_input("Ask me questions about your data")
    if user_question:
        handle_user_input(user_question)

    st.write(user_template.replace("{{MSG}}","Hello ESGenius"), unsafe_allow_html=True)
    st.write(bot_template.replace("{{MSG}}","Hello Human?"),unsafe_allow_html=True)

    with st.sidebar:
        st.subheader("The documents I am currently accessing")
        pdf_docs = st.file_uploader("Upload your files here and click on Process",accept_multiple_files=True)
        if st.button("Process"):
            with st.spinner("Processing... "):             
                # get pdf text   
                raw_text = get_pdf_text(pdf_docs)
                
                # get text chunks
                text_chunks = get_text_chunks(raw_text)
                st.write(len(text_chunks))

                # create a vector store
                vector_store = get_vectorstore(text_chunks)
                st.write(vector_store)

                

                ##Instance of the conversation chain
                st.session_state.conversation = get_conversation_chain(vector_store)
                
    #st.session_state.conversation





if __name__ == '__main__':

    main()